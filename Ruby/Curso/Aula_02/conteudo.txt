Conteúdo
Nesta aula você aprenderá conceitos básicos de Ruby, importantes para o início de aprendizado em qualquer linguagem de programação.

Será abordado:

Tipos de dados
Operadores Matemáticos
Entrada/Saída

Tipos de dados
Existem para classificar dados, possibilitando a definição de regras para cada tipo. Com eles o Ruby sabe como lidar com os dados de nossos programas.

Os principais tipos de dados são:

 

Integer
Como na matemática, Inteiro é o tipo de dado que representa o conjunto de números positivos, negativos e 0.

1. Crie um objeto do tipo Integer atribuindo à uma variável o seguinte valor inteiro.

(variável é um local onde armazenamos dados que serão reutilizados).

Default
irb                                    
integer_number = -20
1
2
irb                                    
integer_number = -20
2. Confirme que a variável realmente é do tipo inteiro executando.

Default
integer_number.class
1
integer_number.class
 

Float
Tipo que representa os números reais inexatos.  De forma abreviada, são números decimais, números que contêm ponto flutuante

Faça que um objeto tenha o tipo float atribuindo a ele um valor decimal.
(praticamente tudo no ruby é um objeto).

Default
float_number = -20.05
1
float_number = -20.05
2. Prove que o objeto realmente é do tipo float executando.

Default
float_number.class
1
float_number.class
 

Boolean
Tipo de dado usado para informar a veracidade de algo. Possui apenas dois estados, sendo eles true que é uma instância da classe TrueClass e false que é uma instância da classe FalseClass.

(não se preocupe caso não saiba o que é uma classe, iremos abordar este assunto em uma próxima aula)

1. Inicie uma variável com tipo boolean da seguinte forma.

Default
ruby_free_course =  true
1
ruby_free_course =  true
2. Confirme que ela é uma instância da classe TrueClass executando.

Default
ruby_free_course.class
1
ruby_free_course.class
 

String
Tipo que representa um texto. Um conjunto de letras, símbolos ou números. Pode ser definido de várias formas, porém, as mais comuns são dentro de aspas simples ou duplas.

Crie um objeto do tipo String atribuindo à uma variável o seguinte texto.
Default
happiness =  "Programming with ruby"
1
happiness =  "Programming with ruby"
2. Para ter certeza que o objeto é uma string, rode

Default
happiness.class
1
happiness.class
 

Array
Um tipo que nos permite armazenar uma lista ordenada de dados em um único objeto. Para definir um array você deve utilizar colchetes.

1. Crie um objeto do tipo array

Default
bitcode_array = [ 0, 1, 2]
1
bitcode_array = [ 0, 1, 2]
2. Acesse a terceira posição do nosso array rodando

Default
bitcode_array[2]
1
bitcode_array[2]
3. Para nos certificarmos que bitcode_array é do tipo Array execute

Default
bitcode_array.class
1
bitcode_array.class
 

Symbol
Símbolo é um tipo de dado semelhante a String, com a diferença de que ele é um objeto imutável. Duas strings idênticas podem ser objetos diferentes, mas um símbolo é apenas um objeto, ocupando sempre o mesmo espaço na memória.

Um símbolo sempre é definido começando com dois pontos : seguido de seu nome.

Inicie um objeto do tipo Symbol atribuindo à uma variável o seguinte valor.
Default
onebit_symbol = :ruby_symbol
1
onebit_symbol = :ruby_symbol
2. Saiba qual posição da memória esse símbolo está salvo, rodando

Default
onebit_symbol.object_id
1
onebit_symbol.object_id
3. Agora crie outra variável com o mesmo símbolo e note que ela aponta para o mesmo endereço na memória.

Default
second_symbol = :ruby_symbol
second_symbol.object_id
onebit_symbol.object_id
1
2
3
second_symbol = :ruby_symbol
second_symbol.object_id
onebit_symbol.object_id
4. Para confirmar que o objeto é do tipo Symbol execute

Default
onebit_symbol.class
1
onebit_symbol.class
 

Hash
Tipo que representa uma coleção de dados organizados por chaves únicas e seus respectivos valores. Enquanto arrays são definidos com colchetes, hashes são definidos com chaves ‘{ }’

1. Crie um objeto do tipo Hash adicionando a uma variável o seguinte valor

Default
onebit_hash = {course: 'ruby', language: 'pt-Br', locale: 'onebitcode.com'}
1
onebit_hash = {course: 'ruby', language: 'pt-Br', locale: 'onebitcode.com'}
2. Saiba onde encontrar o curso de ruby rodando

Default
onebit_hash[:locale]
1
onebit_hash[:locale]
3. Certifique-se que a variável é do tipo Hash executando

Default
onebit_hash.class
1
onebit_hash.class
 

Tipagem Dinâmica
No ruby não é preciso definir o tipo de dado antes de atribuir um valor à uma variável. O tipo é dinâmico, ou seja, ele é definido de acordo com o dado atribuído.

Um exemplo é que podemos alterar o valor de uma variável diversas vezes e em cada uma delas notar que o tipo de dado também mudou.

1. Execute as seguintes linhas de comando

Default
onebit_dynamic = 2
onebit_dynamic.class
onebit_dynamic = "String type"
onebit_dynamic.class
onebit_dynamic = :onebit_symbol
onebit_dynamic.class
1
2
3
4
5
6
onebit_dynamic = 2
onebit_dynamic.class
onebit_dynamic = "String type"
onebit_dynamic.class
onebit_dynamic = :onebit_symbol
onebit_dynamic.class
 

Operadores Matemáticos
Para resolver operações matemáticas no ruby contamos com a seguinte lista de operadores aritméticos:

+ (Adição)
– (Subtração)
* (Multiplicação)
/ (Divisão)
% (Módulo)
** (Expoente)

Resolvendo operações matemáticas

1. Operação do tipo soma.

Default
-5 + 10
1
-5 + 10
2. Subtração entre dois números

Default
1 - 2
1
1 - 2
3. Multiplicação

Default
-2 * -2
1
-2 * -2
4. Operação do tipo divisão

Default
10 / 2
1
10 / 2
5. Módulo entre a divisão de dois números. Será a sobra da divisão entre o primeiro pelo segundo.

Default
10 % 3
1
10 % 3
6. Expoente

Default
2**3
1
2**3
7. As operações podem envolver mais de dois números e também mais de um operador aritmético.

Default
2**3 + 2 * 3
1
2**3 + 2 * 3
Ressaltando que uma operação aritmética sempre terá apenas um resultado.

 

Entrada/Saída
Essas duas operações manipulam dados, com a diferença que a entrada ocorre quando o programa lê dados que podem ter sido recebidos de um teclado, de um arquivo, ou então de outro programa e a saída é um dado produzido pelo programa que pode ser exibido em uma tela, enviado para um arquivo ou então para outro programa.

Para fazer um programa com entrada e saída de dados, crie um arquivo chamado onebit_io.rb e adicione o seguinte código.
Default
# saída de dado
print 'Digite seu nome: '

# Recebendo uma entrada do teclado
name = gets.chomp

# saída utilizando puts
# use códigos ruby dentro de uma string com #{code}
puts "Hello #{name}!"
1
2
3
4
5
6
7
8
9
# saída de dado
print 'Digite seu nome: '
 
# Recebendo uma entrada do teclado
name = gets.chomp
 
# saída utilizando puts
# use códigos ruby dentro de uma string com #{code}
puts "Hello #{name}!"
Perceba que primeiro é exibido uma mensagem pedindo que a pessoa informe seu nome. Depois é criado uma variável chamada name que é igual a gets.chomp.

Mas afinal de contas o que é isso?

gets é um método que recebe como entrada um dado inserido pelo teclado. Como ele captura qualquer coisa precisamos do .chomp para que quando o enter for pressionado ele não crie uma quebra de linha.

Por fim realizamos uma nova saída de dado imprimindo uma saudação para a pessoa que informou seu nome.

2. Veja isso na prática rodando

Default
ruby onebit_io.rb
1
ruby onebit_io.rb
3. Resultado esperado


O gets recebe os dados como String, mas podemos transformá-los em números inteiros e realizar operações matemáticas com eles como no exemplo a seguir.

4. Crie um arquivo chamado arithmetic_io.rb e adicione o seguinte códig

Default
print "Digite o primeiro número inteiro: "
# .to_i transforma a string em um número inteiro
number1 = gets.chomp.to_i

print "Digite o segundo número inteiro: "


number2 = gets.chomp.to_i

addition = number1 + number2
puts "O resultado da adição entre os dois números é #{addition}"
1
2
3
4
5
6
7
8
9
10
11
print "Digite o primeiro número inteiro: "
# .to_i transforma a string em um número inteiro
number1 = gets.chomp.to_i
 
print "Digite o segundo número inteiro: "
 
 
number2 = gets.chomp.to_i
 
addition = number1 + number2
puts "O resultado da adição entre os dois números é #{addition}"
5. Execute o programa

Default
ruby arithmetic_io.rb
1
ruby arithmetic_io.rb
Depois de inserir dois valores inteiros, a saída é o resultado da adição entre os dois números.



 

Missões especiais
Preparei três missões especiais pra te deixar craque em todos assuntos que abordamos nesta aula.

Missão 1
No Irb, crie todos os principais tipos de dados mencionados na aula com valores diferentes dos exemplos.
Missão 2
Crie um programa que receba o nome e idade de uma pessoa e no final exiba estes dois dados em uma única frase.
Missão 3
Crie um programa que que receba dois números inteiros e no final exiba a soma, subtração, adição e divisão entre eles.
Aula passada
Para exibir o texto do exercício da aula passada era necessário a seguinte instrução.

Default
puts "Curso de Ruby do OneBitCode"
1
puts "Curso de Ruby do OneBitCode"
 