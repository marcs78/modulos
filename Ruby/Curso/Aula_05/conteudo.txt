Conteúdo

O conteúdo que será abordado na aula:

Métodos
O que são?
Trabalhando com métodos
Como criar?
Parâmetros
Retorno
Gems
O que são?
Trabalhando com gems
Como instalar uma gem
Novas Funcionalidades
Desinstalar uma gem
Informação
Bundler
 

Métodos
O que são?
Método é uma forma de organizar funções específicas de um programa.  Caso necessário permite a reutilização de código, ou seja, evita escrever o mesmo código diversas vezes.

 

Trabalhando com métodos
 

Como criar?
1- Crie seu primeiro método em um arquivo chamado method.rb

Default
def talk
 puts 'Olá, como você está?'
end

talk
1
2
3
4
5
def talk
 puts 'Olá, como você está?'
end
 
talk
Para definir um método utiliza-se a palavra reservada def seguida pelo nome do método. Depois é escrito um conjunto de expressões, e por fim, a palavra end determina o término do método.

Para executar um método basta apenas escrever o seu nome.  

 


Parâmetros
1- Substitua o código de method.rb por

Default
def talk(first_name, last_name)
 puts "Olá #{first_name} #{last_name}, como você está?"
end

first_name = 'Leonardo'
last_name = 'Scorza'

talk(first_name, last_name)
1
2
3
4
5
6
7
8
def talk(first_name, last_name)
 puts "Olá #{first_name} #{last_name}, como você está?"
end
 
first_name = 'Leonardo'
last_name = 'Scorza'
 
talk(first_name, last_name)
Um método pode depender de um ou mais parâmetros para realizar determinada tarefa.

O exemplo define um método que precisa do primeiro e segundo nome para exibir uma frase. Tendo ciência disso, deve-se passar dois argumentos toda a vez que o método talk for chamado.

 

2- Crie um arquivo chamado transito.rb com o código

Default
def signal(color = 'vermelho')
 puts "O sinal está #{color}"
end

signal 

color = 'verde'
signal(color)
1
2
3
4
5
6
7
8
def signal(color = 'vermelho')
 puts "O sinal está #{color}"
end
 
signal 
 
color = 'verde'
signal(color)
Definindo um valor padrão ao parâmetro, ele torna-se opcional.


Um método pode ser invocado mais de uma vez, em diferentes áreas do programa. Assim seu código está sendo reutilizado.

Quer mudar o código? Altere apenas o método!

 

Retorno
1- Crie um arquivo chamado return.rb

Default
def compare(a, b)
 a > b
end 

a = 1
b = 2

result = compare(a, b)

puts "O resultado da comparação é '#{result}'"
1
2
3
4
5
6
7
8
9
10
def compare(a, b)
 a > b
end 
 
a = 1
b = 2
 
result = compare(a, b)
 
puts "O resultado da comparação é '#{result}'"
O retorno de um método ruby é sempre o resultado de sua última instrução.

 

Gems
O que são?
Gem é um pacote que oferece funcionalidades a fim de resolver uma necessidade específica de um programa Ruby. Pense como o conceito de biblioteca em outras linguagens de programação.

 

Trabalhando com gems

Como instalar uma gem
1- Para instalar uma gem execute em seu terminal

Default
gem install os
1
gem install os
Você instalou a gem os. Ela é uma biblioteca para você extrair informações sobre o PC que você está usando (exp: Sistema operacional, quantidade de cores e etc).

 


Novas Funcionalidades

1- Crie um arquivo chamado os.rb e adicione o código

Default
require 'os'

def my_os
 if OS.windows?

   "Windows"

 elsif OS.linux?

   "Linux"

 elsif OS.mac?

   "Osx"

 else

   "Não consegui identificar" 
 end

end

puts "Meu PC possui #{OS.cpu_count} cores, é #{OS.bits} bits e o sistema operacional é #{my_os}"
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
require 'os'
 
def my_os
 if OS.windows?
 
   "Windows"
 
 elsif OS.linux?
 
   "Linux"
 
 elsif OS.mac?
 
   "Osx"
 
 else
 
   "Não consegui identificar" 
 end
 
end
 
puts "Meu PC possui #{OS.cpu_count} cores, é #{OS.bits} bits e o sistema operacional é #{my_os}"
No começo do arquivo, o require ‘gem_name’ carrega os arquivos da gem. Isso possibilita a declaração de códigos com funcionalidades da biblioteca.

 

obs: Para saber como utilizar uma gem consulte sua documentação.

 


Desinstalar uma gem

1- Para desinstalar uma gem utilize o comando

Default
gem uninstall gem_name
1
gem uninstall gem_name
Ex:

Default
gem uninstall os
1
gem uninstall os
 

Informação

1- Liste todas as gems instaladas na máquina rodando

Default
gem list
1
gem list
 

Bundler

Para ter controle sobre as dependências de um projeto contamos com uma ferramenta que procura e instala gems chamada Bundler.

 

1- Crie um projeto chamado first_project

Default
mkdir first_project
cd first_project
1
2
mkdir first_project
cd first_project
 

2- O bundler também é uma gem. Para instalá-lo rode

Default
gem install bundler
1
gem install bundler
 

3- Salve a lista de gems do projeto em um arquivo chamado Gemfile

Default
source 'https://rubygems.org'

gem 'os'
1
2
3
source 'https://rubygems.org'
 
gem 'os'
Na primeira linha é definido onde o bundle deve procurar pelas gems.

Depois é listado as dependências do projeto.

 

4- Instale estas gems com o comando.

Default
bundle install
1
bundle install
Assim, qualquer pessoa envolvida no projeto pode facilmente instalar suas dependências.

 

 

Missões especiais
 

Missão 1
Crie um programa que possua um método que resolva a potência dado um número base e seu expoente. Estes dois valores devem ser informados pelo usuário.

 

Missão 2
Siga a documentação da gem cpf_cnpj para criar um programa que recebe como entrada um número de cpf e em um método verifique se este número é válido.

Link da documntação:

https://github.com/fnando/cpf_cnpj

 

Aula passada
 

Código da missão 1
Default
array = []

i = 1

1..3.times do 
 print "Digite o #{i}º número: "
 array.push gets.chomp.to_i
 
 i += 1
end

array.each do |a|
 result = a ** 2
 puts "O resultado do número #{a} elevado a segunda potência é #{result}"
end
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
array = []
 
i = 1
 
1..3.times do 
 print "Digite o #{i}º número: "
 array.push gets.chomp.to_i
 
 i += 1
end
 
array.each do |a|
 result = a ** 2
 puts "O resultado do número #{a} elevado a segunda potência é #{result}"
end
 

Código da missão 2
Default
hash = {}

3.times do 
 print 'Informe uma chave: '
 key = gets.chomp
 
 print 'Informe seu valor: '
 value = gets.chomp
 
 hash[key] = value
end

hash.each do |k, v|
 puts "Uma das chaves é #{k} e o seu valor é #{v}"
end
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
hash = {}
 
3.times do 
 print 'Informe uma chave: '
 key = gets.chomp
 
 print 'Informe seu valor: '
 value = gets.chomp
 
 hash[key] = value
end
 
hash.each do |k, v|
 puts "Uma das chaves é #{k} e o seu valor é #{v}"
end
 

Código da missão 3
Default
numbers = {a: 10, b: 30, c: 20, d: 25, e: 15}

maior_numero = 0
result = []

numbers.each do |key, value|
 if value > maior_numero
   maior_numero = value
   result = [key, value]    
 end
end

puts "O maior número é o da chave #{result[0]} com o valor #{result[1]}"
1
2
3
4
5
6
7
8
9
10
11
12
13
numbers = {a: 10, b: 30, c: 20, d: 25, e: 15}
 
maior_numero = 0
result = []
 
numbers.each do |key, value|
 if value > maior_numero
   maior_numero = value
   result = [key, value]    
 end
end
 
puts "O maior número é o da chave #{result[0]} com o valor #{result[1]}"